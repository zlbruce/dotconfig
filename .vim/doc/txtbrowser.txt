*txtbrowser*	Plugin for browsing plain text 

For Vim version 6.0 and above
<Author: guoyoooping@163.com>
<Date: 2010/01/24>
<Release version: 1.1.1>

 1 Overview                                    		|txt-introduction|
 2 Installation 					|txt-install|
 3 features and howto use
       3.1 syntax hightlight 				|txt-highlight|
       3.2 Browser the title				|txt-browser-title|
       3.3 Browser the tables and figures		|txt-browser-table|
       3.4 Browser the URL in the files			|txt-browser-url|
       3.5 Lookup the dictionary			|txt-browser-dict|
       3.6 Other features 				|txt-browser-others|
 4 Element Definition					|txt-element|
       4.1 Text title					|txt-title|
       4.2 Text figure					|txt-figure|
       4.3 Text table					|txt-table|
       4.4 Text keywords				|txt-keywords|
       4.5 Text url					|txt-url|
       4.6 Text email					|txt-email|
       4.7 Text quotes					|txt-quotes|
       4.8 Text parentheses				|txt-parentheses|
       4.9 Text bracket					|txt-bracket|
 5 License 						|txt-license|
 6 bugs							|txt-bugs|
 7 todo				 			|txt-todo|
 8 Changelog						|txt-changlog|

==============================================================================
1. Overview~ 						*txt-introduction*

The "Plain Text Browser" plugin is a plain text browser plugin for Vim. This
plugin allows you to efficiently browse through plain text files. The "Plain
Text Browser" plugin provides the following features:

    * Displays the tags (titles, figures, tables, etc.) defined in a file in a
      vertically or horizontally split Vim window.
    * Groups the tags by their type and displays them in a foldable tree.
    * Hightlight the key elements of a plain text, such elements include:
      keywords(such TODO, ERROR,etc), URLs, texts in bracket, etc.
    * When a tag of title or figure name is selected from the taglist window,
      positions the cursor at the begin of the title or gifure definitions.
    * The list of tags can be saved and then copied to write the content list.
    * Automatically highlights the current tag name.
    * The elemnet of the plain text can be modified easily.
    * Runs in both console/terminal and GUI versions of Vim
    * Can be used in both Unix and MS-Windows systems.
    * Other features in "taglist" plugin.

This file is itself a plain text, and if you have install the "Plain Text
Browser" plugin alreadly, You might already get the syntax highlight which
would make key element hightlight and easy to read. Use ":Tlist" command to
open the text taglist window to have a outline of the fil. Even you have not
install the "Plain Text Browser" plugin, you can this files in any text editor
and web browser, but without syntax hightlight and outline.

==============================================================================
2. Installation~ 					*txt-install*

1) Please make sure taglist(vimscript #273: taglist.vim) has been installed.

2) Download the txt.zip file and unzip the files to the $HOME/.vim or the
$HOME/vimfiles or the $VIM/vimfiles directory, Then cut the file ".ctags" to
your $HOME/ directory. After this step, you should have the following four
files (the directory structure should be preserved):

	* $HOME/.vim/syntax/txt.vim - syntax for text/plain.
	* $HOME/.vim/plugin/txtbrowser.vim - browser tools.
	* $HOME/.vim/doc/txtbrowser.txt - help document in English.
	* $HOME/.vim/doc/txtbrowser.cnx - help document in Chinese. (Open the
					file and Use ":helptags ." to install)
	* $HOME/.ctags - language definition of Exuberant Ctags for txt.

Because release before 1.1.1 use the old plugin name, please delete the old
release at first.(mainly the help documents: txt.txt and txt_cn.txt).


3) Add the following line into your .vimrc file and restart your vim.

	syntax on "syntax highlighting on
	let tlist_txt_settings = 'txt;c:content;f:figures;t:tables'
	au BufRead,BufNewFile *.txt setlocal ft=txt

"TxtBorwser" collaborate well with almost all the plugins(NERD_Tree, txtfmt,
etc), If you want to combine this plugin with other text plugin(take vimscript
#2208: txtfmt as example), You could simply added the following 2 autocommands
to your .vimrc after the line `setlocal ft=txt' as described above:

	au BufRead,BufNewFile *.txt runtime ftplugin/txtfmt.vim
	au BufRead,BufNewFile *.txt runtime syntax/txtfmt.vim 

To uninstall the taglist plugin, remove the plugin/taglist.vim and
doc/taglist.txt files from the $HOME/.vim or $HOME/vimfiles directory.

==============================================================================
3. features and howto use

After the install and preview, you must have a perceptual concept about the
"TxtBrowser" plugin. I will intruduce the detail about how to use these
features in this chapter.

3.1 syntax hightlight					*txt-highlight_cn*

The feature of syntax hightlight make you document highlight the key part,
which include the title, keywords, list, etc. This features is loaded
automatically whenever you open your .txt document. It is recommented that try
other colorscheme to find the best display of your document.

Some documents that don't have the extension "txt" are indeed plain text
documents. You could view these document with syntax highlight. How to do it?
After open these documents, use the command ":set ft=txt" to explicitly tell
the Vim to highlight.

For example, I often view the .log files, I could view the highlight after the
above setting. But it seems that it is a common file type I need to view, so I
add the following line to my .vimrc file to automatically add the syntax
hightlight:

	au BufRead,BufNewFile *.log setlocal ft=txt

3.2 Browser the title				 *txt-browser-title_cn*

If your are a programmer, you must have used the "taglist" plugin to browser
your code. Think about use the same method to browser plain text files. The
"TxtBrowser" plugin make it possible to browser plain text files as browser C
programme. Use ":Tlist" command to open the taglist window, Your title will be
listed in the window. Just by clicking the tag, you would jump where the title
is. This is the same as jumping to where the figures and tables are defined.

Suppose you want to add the table of content to you file after you finish edit.
It's easy with the "TxtBrowser" plugin. Just copying the table of content from
the taglist window and paste it to where you want to put.

How vim know whick is title and which is the table? Let's read the RFC documnet
and find something.

In general, RFC documents have a cover, and the table of content, and then the
main body. We don't care abuot these. What we care is how the titles are
defined. Aha, We found the titles start with a digit, and a symbol "." and then
the name. That comply to people's habit. So we define titles as above. Please
see Chapter4 "Element Definition" for details of how these are defined.

In the meantime, it's highly recommended to use the formal title format.

3.3 Browser the tables and figures			*txt-browser-table_cn*

Some documents have a plenty of tables and figures. It might difficult to
locate them. But with "TxtBrowser" plugin you could rapidly locate them just by
clicking the tag. The method of use is the same as Chapter 3.2 "Browser the
title".

3.4 Browser the URL in the files			*txt-browser-url_cn*

Sometimes we want browser the url in the files. Do you need to open a web
browser and type the address? It's not required. After release 1.1.1, just
putting the cursor to the url and use command ":TxtBrowseUrl" to open the url.
Alternatively you could use map "<Leader>g" to open the url. Here is <Leader>
is the key of your "mapleader" value. If you didn't define that value, it is
"\" key in the keyboard. That means, you type the "\" and "g" would open your
url.

3.5 Lookup the dictionary				*txt-browser-dict_cn*

Sometimes you might need to lookup the dictionary. "TxtBrowser" provide a means
to lookup the words in dictionary web page. How to use? Just put your cursor to
the word and use command ":TxtBrowseWord". Alternatively you could use map
"<Leader>f". 

I set the google English/Chinese dictionary to the defaut dictionayr web page.
It's easy to set your own prefered dictionary. Open your prefered dictionary
web page and lookup the word "text" and got the url link. Copy this link(don't
change any chars) to the following variable in your .vimrc, For example, the
url we got when looking up the word "text" is "http://dict.cn/text", I set my
prefered dictionay page as below in my .vimrc file:

	let g:txtbrowser_dict_url='http://dict.cn/text'

3.6 Other features				*txt-browser-others_cn*

New features(for example offline words lookup, words search through
www.google.com, etc) are to be released in the following release. Please Pay
attention to it:

	http://www.vim.org/scripts/script.php?script_id=2899

You are welcome to report bugs and raise your suggestion and supply means to
implement those features. Thank you very much.

==============================================================================
4. Element Definition                              		*txt-element*

------------------------------------------------------------------------------
4.1 Text title                                  		*txt-title*

We recognize the title according to the serial numbers. For example: 1，1.1，
1.1.1, Please note that the numbers should at the begin of the line and there
should be some space between the numbers and the chapter name. The number of
the symbol "." decide the level of the title. For example:

--regex-txt=/^([0-9]+\.?[ \t]+)([^,]+$)/\1\2/c,content/
--regex-txt=/^(([0-9]+\.){1}([0-9]+\.?)[ \t]+)([^,]+$)/.   \1\4/c,content/
--regex-txt=/^(([0-9]+\.){2}([0-9]+\.?)[ \t]+)([^,]+$)/.       \1\4/c,content/

1000001. This is a test of title level 1
~no sp, ~~~~~sp here

This is an example of title level 1. Please note that there is no space at the
begin of the line and spaces betwenn the numbers and title name.

1000001.1 This is a test of title level 2

content of title level 2.

1000001.1.1 This is a test of title level 3

content of title level 3.

Tags windows only support three levels title, but hightlight has no limit of
this. This is the definition of text title in tag windows:

--regex-txt=/^([0-9]+\.?[ \t]+)([^,]+$)/\1\2/c,content/
--regex-txt=/^(([0-9]+\.){1}([0-9]+\.?)[ \t]+)([^,]+$)/.   \1\4/c,content/
--regex-txt=/^(([0-9]+\.){2}([0-9]+\.?)[ \t]+)([^,]+$)/.       \1\4/c,content/

And this is the definition for highlight. Please here we use the vim special
regular expression(use ":help regex" for more detail).

syn match txtTitle "^\(\d\+\.\)\+\s*[^,。，]\+$"
syn match txtTitle "^\([一二三四五六七八九十][、.]\)\+\s*[^,。，]\+$"
syn match txtTitle "^\d\s\+.\+\s*[^,。，]$"

The element are used as both file structure and syntax highlight.

------------------------------------------------------------------------------
4.2 Text figure                                  		*txt-figure*

Lines start with any number of space and then the keyword "figure" and then num
is figure, for example, You should find the figure tag in the vim taglist
window.

The type of the figure is defined as the following, You could modify them to
fit your own need in the file .ctags.

--regex-txt=/^[ \t]+(figure[ \t]+[0-9a-zA-Z]+([.: ]([ \t]*.+)?)?$)/\1/f,figures/i
--regex-txt=/^[ \t]*(图[ \t]*[0-9a-zA-Z]+[.: ][ \t]*.+$)/\1/f,figures/i

For examples, The following lines start with "Figure 1: Example Message Flow"
is defined as Text figure and will be list in your vim taglist window:

           |  F1 MESSAGE          |                         |
           |--------------------> |  F2 MESSAGE             |
           |                      | ----------------------->|
           |                      |  F3 200 OK              |
           |                      | <-----------------------|
           |  F4 200 OK           |                         |
           |<-------------------- |                         |
           |                      |                         |
        User 1                  Proxy                    User 2

                   Figure 1: Example Message Flow

The element are used as file structure.

------------------------------------------------------------------------------
4.3 Text table                                  		*txt-table*

text start with \t or space and then the keyword "table" and then num is
table, for example, You should find the table tag in the vim taglist window.

The following is the defined for Text table in the file .ctags, You could
modify them to fit your own need.

--regex-txt=/^[ \t]+(table[ \t]+[0-9a-zA-Z]+([.: ]([ \t]*.+)?)?$)/\1/t,tables/i
--regex-txt=/^[ \t]*(表[ \t]*[0-9a-zA-Z]+[.: ][ \t]*.+$)/\1/t,tables/i

For examples, The following lines start with "Table 1: Summary of header
fields, A--O" is defined as Text table and will be list in your vim taglist
window:

                   Header Field       where  proxy  MESSAGE
                   __________________________________________
                   Accept               R              -
                   Content-Encoding                    o
                   Max-Forwards        R      amr      m
                   Organization               ar       o

                   Table 1: Summary of header fields, A--O

The element are used as file structure.

------------------------------------------------------------------------------
4.3 Text keywords                                  		*txt-keywords*

The following words are defined as keywords. You can Add your own keywords in
the following lines in the file txt.vim.

syn keyword txtTodo todo fixme note debug comment notice
syn keyword txtError error bug caution dropped

The element are used as systax highlight.

------------------------------------------------------------------------------
4.4 Text url                                  		*txt-url*

The url and uri is defined as text url. Please refer to rfc1738(Uniform
Resource Locators (URL)) and rfc3986(Uniform Resource Identifier (URI):
Generic Syntax) for url's and uri's definitions.

For example:

	guoyoooping@163.com
	www.pmtv.wordpress.com
	ftp://192.168.1.5/ftpboot/username/example.txt

The element are used as systax highlight.

------------------------------------------------------------------------------
4.5 Text email                                  		*txt-email*

Keywords that in email are defined as text email:

syn match txtEmailMsg
'^\s*\(From\|De\|Sent\|To\|Para\|Date\|Data\|Assunto\|Subject\):.*'
syn match txtEmailQuote '^\(>\($\| \)\)\+'

For example, Please note these keyword From, Sent, To and Subject:

	From: San Zhang(R&D Center Beijing) 
	Sent: 2008年11月27日 13:17
	To: Si Li, Wu Wang, Liu Chen
	Subject: RE: 你们都不踢球?

The element are used as systax highlight.

------------------------------------------------------------------------------
4.6 Text quotes                                  		*txt-quotes*

Words in single quotation marks and double quotation marks are defined as text
quotes. The following is the definition, you could modify them to fit your own
need.

Definition:

syn match   txtQuotes     '["“][^"”]\+\(\n\)\=[^"”]*["”]'hs=s+1,he=e-1

For examples:

	"good example"

The element are used as systax highlight.

------------------------------------------------------------------------------
4.7 Text parentheses                                 	*txt-parentheses*

Words in parentheses are defined as text parentheses.

Definition:

syn match   txtParentesis "[(（][^)）]\+\(\n\)\=[^)）]*[)）]" contains=txtUrl

For examples:

	(good example)

The element are used as systax highlight.

------------------------------------------------------------------------------
4.8 Text bracket                                  		*txt-bracket*

Words in bracket marks defined as text bracket.

Definition is list as the following, you could modify to fit your need:

syn match txtBrackets     '<[^<]\+\(\n\)\=[^<]*>'hs=s+1,he=e-1 contains=txtUrl
syn match txtBrackets     '\[[^\[]\+\(\n\)\=[^\[]*\]'hs=s+1,he=e-1 contains=txtUrl
syn region txtBrackets    matchgroup=txtOperator start="{"        end="}" contains=txtUrl

For examples:

	<good example>
	[good example]
	{good example}

The element are used as systax highlight.

------------------------------------------------------------------------------
4.9 Text list                                  		*txt-list*

Lines that start with some spaces and then the symbol "*"(or the symbol "-" or
the digit and then the symbol ")") and text.

Definition is list as the following, you could modify to fit your need:

syn match txtList    '^\s*[-+*.] [^ ]'me=e-1
syn match txtList    '^\s*(\=\([0-9]\+\|[a-zA-Z]\))'
syn match txtList "^\s\+\d\+\.\d\@!"

For examples:

        - item1: this is the first item.
        + item1: this is the first item.
        * item1: this is the first item.
        . item2: this is the second item.
        3)item3: this is the third item.
        a)item3: this is the third item.
        5.item3: this is the third item.

The element is used as systax highlight.

==============================================================================
5. License~ 						*txt-license*

Permission is hereby granted to use and distribute the "Plain Text Browser"
plugin, with or without modifications, provided that this copyright notice is
copied with it. Like anything else that's free, "Plain Text Browser"
plugin.vim is provided *as is* and comes with no warranty of any kind, either
expressed or implied. In no event will the copyright holder be liable for any
damamges resulting from the use of this software.

==============================================================================
6. bugs have been reported~					 *txt-bugs*

1) On Windows(cygwin and linux works well), If the filename or directory name
   has CJK(Chinese tested only) chars, the taglist couldn't be shown. It might
   be the taglist plugin's bug because the C taglist doesn't work too.

2) Sometime when the enc and fenc of the file are different, The taglist might
   not be shown correctly. To solve the problems, please make sure they are the
   same. 

3) Support for displaying tags in a modified (not-yet-saved) file. 

==============================================================================
7. todo~					 		*txt-todo*

1) support chinese number format title, 如: 一、这是一个标题.

2) Chinese figure and table improve.

3) Thinks about the title of txt2tags.

==============================================================================

8. Changelog~					 		*txt-changlog*

2009-12-26 1.0
	Initial upload
2009-12-29 1.0.2
	1) delete some the personal configuration in txt.vim, it might not be
	fit for all.
	2) Add an example file to illustrate.
2010-01-01 1.0.3
	Add the help document.
2010-01-03  1.0.4
	Update the help document. Give the definition of every element and
	examples.
2010-01-10  1.0.5
	1) Delete all the personal setting in txt.vim, such as "hi clear
	Normal", "set bg&", users should set their own prefer setting.
	2) Change the definition of the figure in .ctags. Being compatible
	with tables without name. such as expression like "figure 1".
	3) Change the filetype of the txt.txt to "txt", Opening the txt.txt
	with vim directly could have a preview of this plugin. 
2010-01-16  1.0.6
	1) Add the Chinese help document. You can install or don't install it.

==============================================================================

